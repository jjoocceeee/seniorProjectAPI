{"version":3,"sources":["../../src/schema/stock.js"],"names":["priceSchema","mongoose","Schema","openPrice","type","Number","description","required","closePrice","volume","date","Date","ticker","String","index","StockSchema","name","IPO_date","RatingSchema","buy_rating","Boolean","requried","Stock","model","Price","Rating","customizationOptions","StockTC","PriceTC","RatingTC","schemaComposer","Query","addFields","stockById","getResolver","stockByIds","stockOne","stockMany","stockCount","stockConnection","stockPagination","priceById","priceByIds","priceOne","priceMany","priceCount","priceConnection","pricePagination","Mutation","addStockToUniverse","insertPrice","insertRating","schema","buildSchema"],"mappings":"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","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\nimport { schemaComposer } from 'graphql-compose';\r\n\r\n\r\nconst priceSchema = new mongoose.Schema({\r\n  openPrice: {\r\n    type: Number,\r\n    description: \"Opening Price of Stock.\",\r\n    required: true\r\n  }, \r\n  closePrice: {\r\n    type: Number,\r\n    description: \"Closing Price of Stock.\",\r\n    required: true\r\n  }, \r\n  volume: {\r\n    type: Number,\r\n    description: \"Volume of Stocks sold that day.\",\r\n    required: true\r\n  }, \r\n  // type: {\r\n  //   type: String,\r\n  //   enum: [ 'open', 'close', 'interday', 'afterhours' ],\r\n  //   required: true\r\n  // },\r\n  date: {\r\n    type: Date,\r\n    description: \"Date-Time for this price.\",\r\n    required: true\r\n  },\r\n  ticker: {\r\n    type: String,\r\n    description: \"Stock this price is associated with.\",\r\n    required: true,\r\n    index:true\r\n  }\r\n});\r\n\r\n\r\nconst StockSchema = new mongoose.Schema({\r\n  ticker:{\r\n    type:String,\r\n    required: true,\r\n    description: \"Ticker ID for stock\",\r\n    index:true\r\n  },\r\n  name: {\r\n    type: String,\r\n    description: \"Name of the stock.\",\r\n    required: true\r\n  }, \r\n  IPO_date: {\r\n    type: Date,\r\n    description: \"Date of IPO.\"\r\n  }\r\n});\r\n\r\n\r\nconst RatingSchema = new mongoose.Schema({\r\n  type: {\r\n    type: String,\r\n    enum: [ 'twoHundredDay', 'twitter', 'fourCandleHammer'],\r\n    required: true,\r\n    description: \"Type of metric associated.\"\r\n  },\r\n  buy_rating: {\r\n    type: Boolean,\r\n    description: \"Buy rating if true. Don't buy rating if false.\",\r\n    required: true\r\n  },\r\n  ticker: {\r\n    type: String, \r\n    requried: true,\r\n    description: \"Stock this metric is associated with.\",\r\n    index:true\r\n  },\r\n  date: {\r\n    type: Date,\r\n    description: \"Date-Time this rating occurred.\",\r\n    required: true\r\n  }\r\n});\r\n\r\n\r\nconst Stock = mongoose.model('Stock', StockSchema);\r\nconst Price = mongoose.model('Price', priceSchema);\r\nconst Rating = mongoose.model('Rating', RatingSchema);\r\n\r\n\r\n\r\n// STEP 2: CONVERT MONGOOSE MODEL TO GraphQL PIECES\r\nconst customizationOptions = {};\r\nconst StockTC = composeWithMongoose(Stock, customizationOptions);\r\nconst PriceTC = composeWithMongoose(Price, customizationOptions);\r\nconst RatingTC = composeWithMongoose(Rating, customizationOptions);\r\n\r\n\r\n\r\n// STEP 3: Add needed CRUD User operations to the GraphQL Schema\r\n// via graphql-compose it will be much much easier, with less typing\r\nschemaComposer.Query.addFields({\r\n  stockById: StockTC.getResolver('findById'),\r\n  stockByIds: StockTC.getResolver('findByIds'),\r\n  stockOne: StockTC.getResolver('findOne'),\r\n  stockMany: StockTC.getResolver('findMany'),\r\n  stockCount: StockTC.getResolver('count'),\r\n  stockConnection: StockTC.getResolver('connection'),\r\n  stockPagination: StockTC.getResolver('pagination'),\r\n\r\n  priceById: PriceTC.getResolver('findById'),\r\n  priceByIds: PriceTC.getResolver('findByIds'),\r\n  priceOne: PriceTC.getResolver('findOne'),\r\n  priceMany: PriceTC.getResolver('findMany'),\r\n  priceCount: PriceTC.getResolver('count'),\r\n  priceConnection: PriceTC.getResolver('connection'),\r\n  pricePagination: PriceTC.getResolver('pagination'),\r\n});\r\n\r\nschemaComposer.Mutation.addFields({\r\n  addStockToUniverse: StockTC.getResolver('createOne'),\r\n  insertPrice: PriceTC.getResolver('createOne'),\r\n  insertRating: RatingTC.getResolver('createOne'),\r\n});\r\n\r\n//TODO: Add stock price to a mutation.\r\n\r\n\r\nconst schema = schemaComposer.buildSchema();\r\nexport default schema;"],"file":"stock.js"}