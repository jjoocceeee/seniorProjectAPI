{"version":3,"sources":["../../src/schema/price.js"],"names":["moment","require","momentTZ","_","addDays","differenceInDays","subDays","format","updateLocale","workingWeekdays","priceSchema","mongoose","Schema","openPrice","type","Number","description","required","closePrice","volume","date","Date","index","ticker","String","Price","model","customizationOptions","PriceTC","addFields","bull","resolve","source","findOne","sort","yestPrice","NULL","addResolver","name","args","context","CheckTwentyDay","highCheck","prev","tz","prevBusinessDay","prices1","indexDate","twentyDayHighDate","twenty","checkPullBack","highPrice","latestPrices","map","universe","priceObjects","Promise","all","prevhigh","number","amount","pullbackDate","find","$lte","$gt","prices","high","check","forEach","price","twentyBefore","highPriceDate","highDate"],"mappings":"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","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\nimport universe from '../universe';\r\nvar moment = require('moment-business-days');\r\nvar momentTZ = require('moment-timezone');\r\n\r\n// import { addHours } from 'date-fns/esm';\r\n\r\nvar _ = require('lodash');\r\nvar addDays = require('date-fns/addDays');\r\nvar differenceInDays = require('date-fns/differenceInDays')\r\nvar subDays = require('date-fns/subDays')\r\nvar format = require('date-fns/format')\r\n\r\n\r\nmoment.updateLocale('us', {\r\n  workingWeekdays: [1, 2, 3, 4, 5]\r\n});\r\n\r\nconst priceSchema = new mongoose.Schema({\r\n  openPrice: {\r\n    type: Number,\r\n    description: \"Opening Price of Stock.\",\r\n    required: true\r\n  }, \r\n  closePrice: {\r\n    type: Number,\r\n    description: \"Closing Price of Stock.\",\r\n    required: true\r\n  }, \r\n  volume: {\r\n    type: Number,\r\n    description: \"Volume of Stocks sold that day.\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date-Time for this price.\",\r\n    required: true,\r\n    index: true\r\n  },\r\n  ticker: {\r\n    type: String,\r\n    description: \"Stock this price is associated with.\",\r\n    required: true,\r\n    index:true\r\n  },\r\n  // bull: {\r\n  //   type: Boolean,\r\n  //   desctption: \"Whether or not the stock is up from the previous day.\"\r\n  // }\r\n});\r\n\r\n\r\n\r\n\r\n// priceSchema.post('save', async function() {\r\n//     let yestPrice = Price.findOne({ticker: this.ticker}).sort({date: -1})\r\n//     if(yestPrice){\r\n//       this.bull= prev.closePrice < this.openPrice\r\n//     }\r\n// });\r\n\r\nconst Price = mongoose.model('Price', priceSchema);\r\nconst customizationOptions = {};\r\nconst PriceTC = composeWithMongoose(Price, customizationOptions);\r\n\r\n\r\nPriceTC.addFields({\r\n  bull: () => ({\r\n    type: \"Boolean\",\r\n    resolve: async (source) => {\r\n      let yestPrice = await Price.findOne({ticker: source.ticker}).sort({date: -1})\r\n      if(yestPrice){\r\n        return yestPrice.closePrice < source.openPrice\r\n      }\r\n      return NULL;\r\n    }\r\n  })\r\n})\r\nPriceTC.addResolver({\r\n  name: \"checkTwentyDayHigh\",\r\n  type: \"Boolean\",\r\n  args: {\r\n    date: \"Date!\",\r\n    ticker: \"String!\"\r\n  },\r\n  resolve: async ({args, source, context}) => {\r\n    return await CheckTwentyDay(args.date).highCheck\r\n  }\r\n})\r\n\r\n\r\nPriceTC.addResolver({\r\n  name: \"UpdateBull\",\r\n  type: \"Boolean\",\r\n  resolve: async({args, source, context}) => {\r\n    let prev = momentTZ(new Date()).tz(\"America/Phoenix\").prevBusinessDay().format('YYYY-MM-DD') + \"T00:00:00.000Z\";\r\n\r\n    let prices1 = await Price.findOne({\r\n      'date':prev,\r\n      'ticker': args.ticker\r\n    });\r\n\r\n\r\n  }\r\n})\r\n\r\nPriceTC.addResolver({\r\n  name: \"fourCandleHammer\",\r\n  type: \"Boolean\",\r\n  args: {\r\n    date: \"Date!\",\r\n    ticker: \"String!\",\r\n  },\r\n  resolve: async ({args, source, context}) => {\r\n      let indexDate = new Date(args.date);\r\n      let twentyDayHighDate = new Date(addDays(indexDate, -24));\r\n      let twenty = await CheckTwentyDay(twentyDayHighDate);\r\n      if(twenty.highCheck){\r\n        return await checkPullBack(twenty.highPrice, -4, indexDate, args.ticker);\r\n      }\r\n  }\r\n});\r\n\r\n\r\n//Get the price for today for each product \r\nPriceTC.addResolver({\r\n  name: \"pricesUniverse\",\r\n  type: [\"Price\"],\r\n  resolve: async ({args, source, context}) => {\r\n      let indexDate = format(subDays(new Date(), 1), 'yyyy-MM-dd')+\"T00:00:00.000Z\";\r\n      let latestPrices = _.map(universe.universe, priceObjects => {\r\n        return Price.findOne({ticker: priceObjects.ticker}).sort({date: -1})\r\n      })\r\n      return Promise.all(latestPrices);\r\n  }\r\n});\r\n\r\n\r\n/*\r\n * Check if there was a 20 day high followed by a 4 day pullback.\r\n * This method is commonly referred to as the Four Candle Hammer Algorithm.\r\n * Parameters:        prevhigh  =>  High $ to check to pullback against.\r\n *                    number    =>  number of days to check for a pullback. Default is 4.\r\n *                    date      =>  Date to check the four candle hammer around (will often be today).\r\n *                    ticker    =>  Ticker symbol for the stock.\r\n *\r\n */\r\nasync function checkPullBack(prevhigh, number, date, ticker){\r\n  let amount = number || -4;\r\n  let indexDate = new Date(date);\r\n  let pullbackDate = new Date(addDays(indexDate, amount));\r\n  let prices = await Price.find({\r\n    'date':{\r\n      $lte:indexDate,\r\n      $gt:pullbackDate\r\n    },\r\n    'ticker':ticker\r\n  });\r\n  let high = prevhigh;\r\n  let check = true;\r\n  _.forEach(prices, price => {\r\n    if(price.openPrice > high){\r\n      check = false;\r\n    }\r\n  });\r\n  return check;\r\n}\r\n\r\n\r\n\r\nasync function CheckTwentyDay(date, ticker){\r\n  let indexDate = new Date(date);\r\n  let twentyBefore = new Date(addDays(indexDate, -20));\r\n  let prices = await Price.find({\r\n    'date':{\r\n      $lte:indexDate,\r\n      $gt:twentyBefore\r\n    },\r\n    'ticker':ticker\r\n  });\r\n\r\n  let high = 0.0;\r\n  let highPriceDate = indexDate;\r\n  _.forEach(prices, price => {\r\n    if(price.closePrice > high){\r\n      high = price.closePrice;\r\n      highPriceDate = price.date\r\n    }\r\n  });\r\n  if(differenceInDays(indexDate, highPriceDate) == 0){\r\n    return {\r\n      highCheck:true,\r\n      highDate: highPriceDate,\r\n      highPrice:high\r\n    }\r\n  } else {\r\n    return {\r\n      highCheck:false,\r\n      highDate: highPriceDate,\r\n      highPrice:high\r\n    }\r\n  }\r\n}\r\n\r\nexport { PriceTC };"],"file":"price.js"}