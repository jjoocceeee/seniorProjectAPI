{"version":3,"sources":["../../src/schema/weight.js"],"names":["weightSchema","mongoose","Schema","ticker","type","String","descpription","required","twitterWeight","Number","description","fourWeight","profitWeight","movingWeight","companyWeight","date","Date","index","Weight","model","customizationOptions","WeightTC","addResolver","name","args","count","resolve","source","context","find","sort","limit","weights","_id","response"],"mappings":"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","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\nimport { schemaComposer } from 'graphql-compose';\r\nimport _ from \"lodash\"\r\n\r\n\r\nconst weightSchema = new mongoose.Schema({\r\n  ticker: {\r\n    type: String,\r\n    descpription: \"Ticker the weight belongs to\",\r\n    required: true\r\n  },\r\n  twitterWeight: {\r\n    type: Number,\r\n    description: \"Twitter weight\",\r\n    required: true\r\n  }, \r\n  fourWeight: {\r\n    type: Number,\r\n    description: \"Four Candle Hammer Weight\",\r\n    required: true\r\n  }, \r\n  profitWeight: {\r\n    type: Number,\r\n    description: \"Profit Loss Ratio Weight\",\r\n    required: true\r\n  }, \r\n  movingWeight: {\r\n    type: Number,\r\n    description: \"20-day Moving Average Weight\",\r\n    required: true\r\n  }, \r\n  companyWeight: {\r\n    type: Number,\r\n    description: \"Company Metric Weight\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date-Time for this price.\",\r\n    required: true,\r\n    index: true\r\n  }\r\n});\r\n\r\n\r\nconst Weight = mongoose.model('Weight', weightSchema);\r\nconst customizationOptions = {};\r\nexport const WeightTC = composeWithMongoose(Weight, customizationOptions);\r\n\r\nWeightTC.addResolver({\r\n  name:\"RecentWeights\",  \r\n  description:\"Will provide recents weights for the ticker. The number of weights is determined by the count argument.\",\r\n  args: {\r\n      count: \"Int!\",\r\n      ticker: \"String!\"\r\n    },\r\n    type: [\"Weight\"],\r\n    resolve: async ({args, source, context}) => {\r\n      let weights = await Weight.find({'ticker': args.ticker}).sort({date: -1}).limit(args.count);\r\n      return weights;\r\n    }\r\n  })\r\n\r\n\r\n\r\n\r\nWeightTC.addResolver({\r\n  name: \"MostRecentWeight\",\r\n  description:\"Provides the most recent weight.\",\r\n  type: \"Weight\",\r\n  args: {\r\n    ticker: \"String!\"\r\n  },\r\n  resolve: async ({args, source, context}) => {\r\n    let response = await Weight.find({'ticker':args.ticker}).sort({ _id: -1 });\r\n    return response[0];\r\n  }\r\n})\r\n\r\n\r\nWeightTC.addResolver({\r\n  name: \"AllWeightsTicker\",\r\n  type: [\"Weight\"],\r\n  args: {\r\n    ticker: \"String!\"\r\n  },\r\n  resolve: async ({args, source, context}) => {\r\n    let response = await Weight.find({'ticker':args.ticker}).sort({ _id: -1 });\r\n    return response;\r\n  }\r\n})\r\n\r\nWeightTC.addResolver({\r\n  name:\"WeightCount\",  \r\n  description:\"Count of total weights in ML algorithm.\",\r\n  type: \"Int\",\r\n  resolve: async ({args, source, context}) => {\r\n    return await Weight.count();\r\n  }\r\n})\r\n\r\n\r\n\r\n"],"file":"weight.js"}