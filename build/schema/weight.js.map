{"version":3,"sources":["../../src/schema/weight.js"],"names":["weightSchema","mongoose","Schema","ticker","type","String","descpription","required","twitterWeight","Number","description","fourWeight","profitWeight","movingWeigth","companyWeight","date","Date","Weight","model","customizationOptions","WeightTC","addResolver","name","args","resolve","source","context","find","sort","_id"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA,IAAMA,YAAY,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,YAAY,EAAE,8BAFR;AAGNC,IAAAA,QAAQ,EAAE;AAHJ,GAD+B;AAMvCC,EAAAA,aAAa,EAAE;AACbJ,IAAAA,IAAI,EAAEK,MADO;AAEbC,IAAAA,WAAW,EAAE,gBAFA;AAGbH,IAAAA,QAAQ,EAAE;AAHG,GANwB;AAWvCI,EAAAA,UAAU,EAAE;AACVP,IAAAA,IAAI,EAAEK,MADI;AAEVC,IAAAA,WAAW,EAAE,2BAFH;AAGVH,IAAAA,QAAQ,EAAE;AAHA,GAX2B;AAgBvCK,EAAAA,YAAY,EAAE;AACZR,IAAAA,IAAI,EAAEK,MADM;AAEZC,IAAAA,WAAW,EAAE,0BAFD;AAGZH,IAAAA,QAAQ,EAAE;AAHE,GAhByB;AAqBvCM,EAAAA,YAAY,EAAE;AACZT,IAAAA,IAAI,EAAEK,MADM;AAEZC,IAAAA,WAAW,EAAE,8BAFD;AAGZH,IAAAA,QAAQ,EAAE;AAHE,GArByB;AA0BvCO,EAAAA,aAAa,EAAE;AACbV,IAAAA,IAAI,EAAEK,MADO;AAEbC,IAAAA,WAAW,EAAE,uBAFA;AAGbH,IAAAA,QAAQ,EAAE;AAHG,GA1BwB;AA+BvCQ,EAAAA,IAAI,EAAE;AACJX,IAAAA,IAAI,EAAEY,IADF;AAEJN,IAAAA,WAAW,EAAE,2BAFT;AAGJH,IAAAA,QAAQ,EAAE;AAHN;AA/BiC,CAApB,CAArB;;AAuCA,IAAMU,MAAM,GAAGhB,qBAASiB,KAAT,CAAe,QAAf,EAAyBlB,YAAzB,CAAf;;AACA,IAAMmB,oBAAoB,GAAG,EAA7B;AACO,IAAMC,QAAQ,GAAG,+BAAoBH,MAApB,EAA4BE,oBAA5B,CAAjB;;AAEPC,QAAQ,CAACC,WAAT,CAAqB;AACnBC,EAAAA,IAAI,EAAE,kBADa;AAEnBlB,EAAAA,IAAI,EAAE,SAFa;AAGnBmB,EAAAA,IAAI,EAAE;AACJR,IAAAA,IAAI,EAAE,OADF;AAEJZ,IAAAA,MAAM,EAAE;AAFJ,GAHa;AAOnBqB,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQD,cAAAA,IAAR,QAAQA,IAAR,EAAcE,MAAd,QAAcA,MAAd,EAAsBC,OAAtB,QAAsBA,OAAtB;AAAA;AAAA,qBACMT,MAAM,CAACU,IAAP,CAAY;AAAC,0BAASxB;AAAV,eAAZ,EAA+ByB,IAA/B,CAAoC;AAAEC,gBAAAA,GAAG,EAAE,CAAC;AAAR,eAApC,CADN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAPY,CAArB","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\nimport { schemaComposer } from 'graphql-compose';\r\n\r\n\r\nconst weightSchema = new mongoose.Schema({\r\n  ticker: {\r\n    type: String,\r\n    descpription: \"Ticker the weight belongs to\",\r\n    required: true\r\n  },\r\n  twitterWeight: {\r\n    type: Number,\r\n    description: \"Twitter weight\",\r\n    required: true\r\n  }, \r\n  fourWeight: {\r\n    type: Number,\r\n    description: \"Four Candle Hammer Weight\",\r\n    required: true\r\n  }, \r\n  profitWeight: {\r\n    type: Number,\r\n    description: \"Profit Loss Ratio Weight\",\r\n    required: true\r\n  }, \r\n  movingWeigth: {\r\n    type: Number,\r\n    description: \"20-day Moving Average Weight\",\r\n    required: true\r\n  }, \r\n  companyWeight: {\r\n    type: Number,\r\n    description: \"Company Metric Weight\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date-Time for this price.\",\r\n    required: true\r\n  }\r\n});\r\n\r\n\r\nconst Weight = mongoose.model('Weight', weightSchema);\r\nconst customizationOptions = {};\r\nexport const WeightTC = composeWithMongoose(Weight, customizationOptions);\r\n\r\nWeightTC.addResolver({\r\n  name: \"MostRecentWeight\",\r\n  type: \"Boolean\",\r\n  args: {\r\n    date: \"Date!\",\r\n    ticker: \"String!\"\r\n  },\r\n  resolve: async ({args, source, context}) => {\r\n    return await Weight.find({'ticker':ticker}).sort({ _id: -1 })\r\n  }\r\n})\r\n\r\n\r\n\r\n"],"file":"weight.js"}