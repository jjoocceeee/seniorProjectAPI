{"version":3,"sources":["../../src/schema/alpaca.js"],"names":["Alpaca","require","subDays","alpaca","keyId","process","env","alpaca_api_key_id","secretKey","alpaca_api_secret_key","paper","AccountSchema","mongoose","Schema","value","type","Number","description","required","date","Date","PortfolioSchema","ticker","String","qty","change_today","price","Account","model","Portfolio","customizationOptions","AccountTC","PortfolioTC","addResolver","name","resolve","args","source","context","getPositions","pos","getAccount","acc"],"mappings":"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","sourcesContent":["const Alpaca = require('@alpacahq/alpaca-trade-api')\r\nvar subDays = require('date-fns/subDays')\r\nimport { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\n\r\n\r\nconst alpaca = new Alpaca({\r\n  keyId: process.env.alpaca_api_key_id,\r\n  secretKey: process.env.alpaca_api_secret_key,\r\n  paper: true,\r\n})\r\n\r\n\r\nconst AccountSchema = new mongoose.Schema({\r\n  value: {\r\n    type: Number,\r\n    description: \"Wallet Value at end of day.\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date Account object was updated.\"\r\n  }\r\n});\r\n\r\nconst PortfolioSchema = new mongoose.Schema({\r\n  value: {\r\n    type: Number,\r\n    description: \"Wallet Value at end of day.\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date Account object was updated.\"\r\n  },\r\n  ticker: {\r\n    type: String,\r\n    description: \"Ticker symbol \"\r\n  },\r\n  qty: {\r\n    type: Number,\r\n    description: \"Quantity of stocks owned\"\r\n  }, \r\n  change_today: {\r\n    type: Number,\r\n    description: \"Change for today\"\r\n  },\r\n  price: {\r\n    type: Number, \r\n    description: \"Current Price of the stock\"\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Account = mongoose.model('Account', AccountSchema);\r\nconst Portfolio = mongoose.model('Portfolio', PortfolioSchema);\r\n\r\n// STEP 2: CONVERT MONGOOSE MODEL TO GraphQL PIECES\r\nconst customizationOptions = {};\r\nconst AccountTC = composeWithMongoose(Account, customizationOptions);\r\nconst PortfolioTC = composeWithMongoose(Portfolio, customizationOptions);\r\n\r\n\r\nAccountTC.addResolver({\r\n  name: \"getPositions\",\r\n  type: \"JSON\",\r\n  resolve: async ({args, source, context}) => {\r\n    let pos = await getPositions();\r\n    return pos;\r\n  }\r\n});\r\n\r\nAccountTC.addResolver({\r\n  name: \"getAccount\",\r\n  type: \"JSON\",\r\n  resolve: async ({args, source, context}) => {\r\n    let acc = await getAccount();\r\n    return acc;\r\n  }\r\n});\r\n\r\n\r\nasync function getPositions(){\r\n  let pos = await alpaca.getPositions();\r\n  return pos;\r\n}\r\n\r\nasync function getAccount(){\r\n  let acc = await alpaca.getAccount();\r\n  return acc;\r\n}\r\n\r\n\r\n\r\nexport { AccountTC, PortfolioTC };"],"file":"alpaca.js"}