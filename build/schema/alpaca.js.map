{"version":3,"sources":["../../src/schema/alpaca.js"],"names":["Alpaca","require","subDays","alpaca","keyId","process","env","alpaca_api_key_id","secretKey","alpaca_api_secret_key","paper","AccountSchema","mongoose","Schema","value","type","Number","description","required","date","Date","PortfolioSchema","ticker","String","qty","change_today","price","Account","model","Portfolio","customizationOptions","AccountTC","PortfolioTC","addResolver","name","resolve","args","source","context","getPositions","pos","getAccount","acc","fromDate","toDate","from","to","getTrades","trades","_","map","trade","symbol","side","filled_at","filled_avg_price","after","until","getOrders","status","direction"],"mappings":"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","sourcesContent":["const Alpaca = require('@alpacahq/alpaca-trade-api')\r\nvar subDays = require('date-fns/subDays')\r\nimport { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\nimport _ from 'lodash'\r\n\r\n\r\n\r\nconst alpaca = new Alpaca({\r\n  keyId: process.env.alpaca_api_key_id,\r\n  secretKey: process.env.alpaca_api_secret_key,\r\n  paper: true,\r\n})\r\n\r\n\r\nconst AccountSchema = new mongoose.Schema({\r\n  value: {\r\n    type: Number,\r\n    description: \"Wallet Value at end of day.\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date Account object was updated.\"\r\n  }\r\n});\r\n\r\nconst PortfolioSchema = new mongoose.Schema({\r\n  value: {\r\n    type: Number,\r\n    description: \"Wallet Value at end of day.\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    description: \"Date Account object was updated.\"\r\n  },\r\n  ticker: {\r\n    type: String,\r\n    description: \"Ticker symbol \"\r\n  },\r\n  qty: {\r\n    type: Number,\r\n    description: \"Quantity of stocks owned\"\r\n  }, \r\n  change_today: {\r\n    type: Number,\r\n    description: \"Change for today\"\r\n  },\r\n  price: {\r\n    type: Number, \r\n    description: \"Current Price of the stock\"\r\n  }\r\n});\r\n\r\n\r\n\r\nconst Account = mongoose.model('Account', AccountSchema);\r\nconst Portfolio = mongoose.model('Portfolio', PortfolioSchema);\r\n\r\n// STEP 2: CONVERT MONGOOSE MODEL TO GraphQL PIECES\r\nconst customizationOptions = {};\r\nconst AccountTC = composeWithMongoose(Account, customizationOptions);\r\nconst PortfolioTC = composeWithMongoose(Portfolio, customizationOptions);\r\n\r\n\r\nAccountTC.addResolver({\r\n  name: \"getPositions\",\r\n  type: \"JSON\",\r\n  resolve: async ({args, source, context}) => {\r\n    let pos = await getPositions();\r\n    return pos;\r\n  }\r\n});\r\n\r\nAccountTC.addResolver({\r\n  name: \"getAccount\",\r\n  type: \"JSON\",\r\n  resolve: async ({args, source, context}) => {\r\n    let acc = await getAccount();\r\n    return acc;\r\n  }\r\n});\r\n\r\nAccountTC.addResolver({\r\n  name: \"getTrades\",\r\n  args:{\r\n    fromDate: \"Date\",\r\n    toDate: \"Date\"\r\n  },\r\n  type: \"JSON\",\r\n  resolve: async ({args, source, context}) =>{\r\n    let from;\r\n    let to;\r\n    if(!args.fromDate){\r\n      from = subDays(new Date(), 50);\r\n    } else{\r\n      from = args.fromDate;\r\n    }\r\n    if(!args.toDate){\r\n      to = new Date();\r\n    } else{\r\n      to = args.toDate;\r\n    }\r\n\r\n\r\n    let trades = await getTrades(from, to);\r\n    return _.map(trades, trade=>{\r\n      return {\r\n        \"ticker\": trade.symbol,\r\n        \"qty\":trade.qty,\r\n        \"side\":trade.side,\r\n        \"date\":trade.filled_at,\r\n        \"price_per_stock\":trade.filled_avg_price\r\n      }\r\n    })\r\n    \r\n  }\r\n})\r\n\r\n\r\nasync function getPositions(){\r\n  let pos = await alpaca.getPositions();\r\n  return pos;\r\n}\r\n\r\nasync function getAccount(){\r\n  let acc = await alpaca.getAccount();\r\n  return acc;\r\n}\r\n\r\nasync function getTrades(after, until){\r\n  let trades = await alpaca.getOrders({\r\n    status: 'all',\r\n    after: after,\r\n    until: until,\r\n    direction: 'asc'\r\n  })\r\n  return trades\r\n}\r\n\r\n\r\n\r\nexport { AccountTC, PortfolioTC };"],"file":"alpaca.js"}