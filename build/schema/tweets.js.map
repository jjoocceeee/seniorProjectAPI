{"version":3,"sources":["../../src/schema/tweets.js"],"names":["TweetSchema","mongoose","Schema","tweet","type","String","required","description","index","rating","Number","date","Date","company","Tweet","model","customizationOptions","TweetTC","addResolver","name","args","ticker","resolve","source","context","console","log","find","sort","limit","tweets"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,WAAW,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACtCC,EAAAA,KAAK,EAAC;AACJC,IAAAA,IAAI,EAACC,MADD;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,WAAW,EAAE,OAHT;AAIJC,IAAAA,KAAK,EAAC;AAJF,GADgC;AAOtCC,EAAAA,MAAM,EAAE;AACNL,IAAAA,IAAI,EAAEM,MADA;AAENH,IAAAA,WAAW,EAAE,2BAFP;AAGND,IAAAA,QAAQ,EAAE;AAHJ,GAP8B;AAYtCK,EAAAA,IAAI,EAAE;AACJP,IAAAA,IAAI,EAAEQ,IADF;AAEJN,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,WAAW,EAAE;AAHT,GAZgC;AAiBtCM,EAAAA,OAAO,EAAE;AACPT,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAGPC,IAAAA,WAAW,EAAE;AAHN;AAjB6B,CAApB,CAApB;;AAyBA,IAAMO,KAAK,GAAGb,qBAASc,KAAT,CAAe,OAAf,EAAwBf,WAAxB,CAAd,C,CAEA;;;AACA,IAAMgB,oBAAoB,GAAG,EAA7B;AACA,IAAMC,OAAO,GAAG,+BAAoBH,KAApB,EAA2BE,oBAA3B,CAAhB;;AAEAC,OAAO,CAACC,WAAR,CAAoB;AAClBC,EAAAA,IAAI,EAAC,sBADa;AAElBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,MAAM,EAAE;AADN,GAFY;AAKhBjB,EAAAA,IAAI,EAAE,CAAC,OAAD,CALU;AAMhBkB,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQF,cAAAA,IAAR,QAAQA,IAAR,EAAcG,MAAd,QAAcA,MAAd,EAAsBC,OAAtB,QAAsBA,OAAtB;AACPC,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BN,IAAI,CAACC,MAAlC;AADO;AAAA,qBAEYP,KAAK,CAACa,IAAN,CAAW;AAACd,gBAAAA,OAAO,EAAEO,IAAI,CAACC;AAAf,eAAX,EAAmCO,IAAnC,CAAwC;AAACjB,gBAAAA,IAAI,EAAE,CAAC;AAAR,eAAxC,EAAoDkB,KAApD,CAA0D,EAA1D,CAFZ;;AAAA;AAEHC,cAAAA,MAFG;AAAA,+CAGAA,MAHA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANS,CAApB","sourcesContent":["import { composeWithMongoose } from 'graphql-compose-mongoose/node8';\r\nimport mongoose, { mongo } from 'mongoose';\r\n\r\nconst TweetSchema = new mongoose.Schema({\r\n  tweet:{\r\n    type:String,\r\n    required: true,\r\n    description: \"Tweet\",\r\n    index:true\r\n  },\r\n  rating: {\r\n    type: Number,\r\n    description: \"Sentiment Score for Tweet\",\r\n    required: true\r\n  }, \r\n  date: {\r\n    type: Date,\r\n    required: true,\r\n    description: \"Date Tweet was published.\"\r\n  },\r\n  company: {\r\n    type: String,\r\n    required: true,\r\n    description: \"Company that the tweet is about.\"\r\n  }\r\n});\r\n\r\n\r\nconst Tweet = mongoose.model('Tweet', TweetSchema);\r\n\r\n// STEP 2: CONVERT MONGOOSE MODEL TO GraphQL PIECES\r\nconst customizationOptions = {};\r\nconst TweetTC = composeWithMongoose(Tweet, customizationOptions);\r\n\r\nTweetTC.addResolver({\r\n  name:\"RecentTweetsByTicker\",  \r\n  args: {\r\n      ticker: \"String!\"\r\n    },\r\n    type: [\"Tweet\"],\r\n    resolve: async ({args, source, context}) => {\r\n      console.log(\"Args.ticker: \", args.ticker);\r\n      let tweets = await Tweet.find({company: args.ticker}).sort({date: -1}).limit(10);\r\n      return tweets;\r\n    }\r\n  })\r\n\r\n\r\nexport { TweetTC };"],"file":"tweets.js"}